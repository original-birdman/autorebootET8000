#!/bin/sh

OMB="main"
USE_OMB="no"
CHECK_TERMINAL='/tmp/.autoRebootET8000'
if [ -d /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/ ] && [ -e /sbin/open_multiboot ] && [ -e /sbin/open-multiboot-branding-helper.py ] ; then
    echo "OMB main image is running!"
    USE_OMB="yes"
    if mountpoint -q /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot; then
        echo "OMB child image is running!"
        OMB="child"
    fi
fi

case $1 in
    start)
        if [ -e /etc/autoRebootET8000 ] ; then
            CURRENT_WAKEUP=$( cat /etc/autoRebootET8000 )
            if [ $CURRENT_WAKEUP = "main" ] || [ $CURRENT_WAKEUP = "child" ] ; then
                AUTO_WAKEUP=$( cat /proc/stb/fp/was_timer_wakeup )
                if [ $AUTO_WAKEUP = "0" ] ; then
                    rm -rf /etc/autoRebootET8000 2>/dev/null
                    echo > $CHECK_TERMINAL 2>/dev/null
                    if [ $USE_OMB = "yes" ] ; then
                        if [ -e /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot ] ; then
                            rm -rf /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot 2>/dev/null
                        else
                            echo $AUTO_WAKEUP > /etc/autoRebootET8000
                            echo "Need to reboot box for fix-driver et8000 and use OMB..."
# Front panel too...12 chars max
                            echo "Reboot fix" > /dev/dbox/oled0
                            reboot
# Sleep, to prevent anything else starting before the reboot kicks in.
                            sleep 20
                        fi
                    fi
                else
                    echo $AUTO_WAKEUP > /etc/autoRebootET8000
                    echo "Need to reboot box for fix-driver et8000..."
# Front panel too...12 chars max
                    echo "Reboot fix" > /dev/dbox/oled0
                    reboot
# Sleep, to prevent anything else starting before the reboot kicks in.
                    sleep 20
                fi
            else
                if [ $USE_OMB = "yes" ] ; then
                    if [ -e /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot ] ; then
                        rm -rf /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot 2>/dev/null
                    fi
                fi
                echo $CURRENT_WAKEUP > /proc/stb/fp/was_timer_wakeup
                rm -rf /etc/autoRebootET8000  2>/dev/null
                echo > $CHECK_TERMINAL 2>/dev/null
            fi
        else
            if [ $USE_OMB = "yes" ] ; then
                if [ -e /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot ] ; then
                    rm -rf /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot 2>/dev/null
                    echo > $CHECK_TERMINAL 2>/dev/null
                    echo "No reboot for fix-driver et8000 --> before reboot OMB..."
                    exit 0
                fi
            fi
            if [ ! -e $CHECK_TERMINAL ] ; then
                AUTO_WAKEUP=$( cat /proc/stb/fp/was_timer_wakeup )
                echo $AUTO_WAKEUP > /etc/autoRebootET8000
                echo "Need to reboot box for fix-driver et8000..."
# Front panel too...12 chars max
                echo "Reboot fix" > /dev/dbox/oled0
                reboot
# Sleep, to prevent anything else starting before the reboot kicks in.
                sleep 20
            fi
        fi
    ;;
    stop)
        if [ ! -e /etc/autoRebootET8000 ] ; then
            if [ $USE_OMB = "yes" ] ; then
                echo $OMB > /usr/lib/enigma2/python/Plugins/Extensions/OpenMultiboot/.reboot
                echo "Set flag reboot for fix-driver et8000 and use OMB..."
            fi
# Front panel too...12 chars max
            echo "Flag set..." > /dev/dbox/oled0
            echo $OMB > /etc/autoRebootET8000
        fi
    ;;
    *)
    echo " "
    echo "Options: $0 {start|stop}"
    echo " "
esac

exit 0
